import { __awaiter } from "tslib";
import { Modal, Notice, MarkdownView } from 'obsidian';
import * as path from 'path';
export class CharacterManager {
    constructor(app, plugin) {
        this.app = app;
        this.plugin = plugin;
    }
    openCharacterList() {
        new CharacterListModal(this.app, this.plugin).open();
    }
    getCharacterFiles(folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const characterFolder = this.plugin.settings.defaultCharacterFolder;
            return this.app.vault.getFiles().filter((file) => file.path.startsWith(path.join(folderPath, characterFolder)));
        });
    }
    createNewCharacter(character, folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.plugin.settings.autoCreateFolders) {
                const characterFolderPath = path.join(folderPath, this.plugin.settings.defaultCharacterFolder);
                try {
                    const folderExists = yield this.app.vault.adapter.exists(characterFolderPath);
                    if (!folderExists) {
                        yield this.app.vault.createFolder(characterFolderPath);
                    }
                }
                catch (error) {
                    console.error("Error creating folder:", error);
                    throw error;
                }
            }
            const characterFilePath = path.join(folderPath, this.plugin.settings.defaultCharacterFolder, `${character}.md`);
            const file = yield this.app.vault.create(characterFilePath, `# ${character}`);
            return file;
        });
    }
}
class CharacterListModal extends Modal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
        this.editor = null;
        this.characterNames = [];
        this.folderPath = '';
        const activeLeaf = this.app.workspace.activeLeaf;
        if (activeLeaf && activeLeaf.view instanceof MarkdownView) {
            this.editor = activeLeaf.view.editor;
        }
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: 'SELECT OR CREATE CHARACTER' });
        const newCharacterButton = contentEl.createEl('button', { text: '+ ADD NEW CHARACTER' });
        newCharacterButton.onclick = () => this.openNewCharacterModal();
        const characterListContainer = contentEl.createEl('div', {
            cls: 'character-list-container'
        });
        this.loadCharacters(characterListContainer);
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
    loadCharacters(characterListContainer) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeFile = this.app.workspace.getActiveFile();
            if (!activeFile) {
                new Notice("NO FILE FOUND FOR THE CURRENT EDITOR.");
                return;
            }
            this.folderPath = path.dirname(activeFile.path);
            let characterFiles = yield this.plugin.characterManager.getCharacterFiles(this.folderPath);
            characterFiles = characterFiles.filter((file) => file.path !== activeFile.path);
            if (characterFiles.length > 0) {
                this.characterNames = characterFiles.map((file) => path.basename(file.path, '.md'));
                this.characterNames.forEach(character => {
                    const characterItem = characterListContainer.createEl('button', { text: character });
                    characterItem.onclick = () => __awaiter(this, void 0, void 0, function* () {
                        yield this.insertCharacterText(character);
                    });
                });
            }
            else {
                characterListContainer.createEl('p', { text: 'NO CHARACTERS AVAILABLE. CREATE ONE!' });
            }
        });
    }
    insertCharacterText(character) {
        return __awaiter(this, void 0, void 0, function* () {
            const formattedCharacterText = `[[${character}]]`;
            const text = `### ${formattedCharacterText}\n`;
            if (this.editor) {
                this.editor.replaceRange(text, this.editor.getCursor());
            }
            this.close();
        });
    }
    openNewCharacterModal() {
        return __awaiter(this, void 0, void 0, function* () {
            new NewCharacterModal(this.app, this.plugin, this.folderPath).open();
        });
    }
}
class NewCharacterModal extends Modal {
    constructor(app, plugin, folderPath) {
        super(app);
        this.plugin = plugin;
        this.folderPath = folderPath;
        this.characterInput = null;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: 'CREATE NEW CHARACTER' });
        this.characterInput = contentEl.createEl('input', { type: 'text', placeholder: 'Enter character name...' });
        const createButton = contentEl.createEl('button', { text: 'Create Character' });
        createButton.onclick = () => __awaiter(this, void 0, void 0, function* () {
            if (this.characterInput) {
                const characterName = this.characterInput.value.trim();
                if (characterName) {
                    yield this.plugin.characterManager.createNewCharacter(characterName, this.folderPath);
                    this.close();
                    new Notice(`Character ${characterName} created successfully!`);
                }
            }
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,