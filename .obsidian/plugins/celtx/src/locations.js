import { __awaiter } from "tslib";
import { Modal, Notice, MarkdownView } from 'obsidian';
import * as path from 'path';
export class LocationManager {
    constructor(app, plugin) {
        this.app = app;
        this.plugin = plugin;
    }
    openLocationList() {
        new LocationListModal(this.app, this.plugin).open();
    }
    getLocationFiles(folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const locationFolder = this.plugin.settings.defaultLocationFolder;
            return this.app.vault.getFiles().filter((file) => file.path.startsWith(path.join(folderPath, locationFolder)));
        });
    }
    createNewLocation(location, type, folderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.plugin.settings.autoCreateFolders) {
                const locationFolderPath = path.join(folderPath, this.plugin.settings.defaultLocationFolder);
                try {
                    const folderExists = yield this.app.vault.adapter.exists(locationFolderPath);
                    if (!folderExists) {
                        yield this.app.vault.createFolder(locationFolderPath);
                    }
                }
                catch (error) {
                    console.error("Error creating folder:", error);
                    throw error;
                }
            }
            const locationFileName = `${type}-${location}-${path.basename(folderPath)}`;
            const locationFilePath = path.join(folderPath, this.plugin.settings.defaultLocationFolder, `${locationFileName}.md`);
            const file = yield this.app.vault.create(locationFilePath, `# ${locationFileName}`);
            return file;
        });
    }
}
class LocationListModal extends Modal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
        this.editor = null;
        this.locationNames = [];
        this.folderPath = '';
        const activeLeaf = this.app.workspace.activeLeaf;
        if (activeLeaf && activeLeaf.view instanceof MarkdownView) {
            this.editor = activeLeaf.view.editor;
        }
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: 'SELECT OR CREATE LOCATION' });
        const newLocationButton = contentEl.createEl('button', { text: '+ ADD NEW LOCATION' });
        newLocationButton.onclick = () => this.openNewLocationModal();
        const locationListContainer = contentEl.createEl('div', {
            cls: 'location-list-container'
        });
        this.loadLocations(locationListContainer);
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
    loadLocations(locationListContainer) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeFile = this.app.workspace.getActiveFile();
            if (!activeFile) {
                new Notice("NO FILE FOUND FOR THE CURRENT EDITOR.");
                return;
            }
            this.folderPath = path.dirname(activeFile.path);
            let locationFiles = yield this.plugin.locationManager.getLocationFiles(this.folderPath);
            locationFiles = locationFiles.filter((file) => file.path !== activeFile.path);
            if (locationFiles.length > 0) {
                this.locationNames = locationFiles.map((file) => path.basename(file.path, '.md'));
                this.locationNames.forEach(location => {
                    const locationItem = locationListContainer.createEl('button', { text: location });
                    locationItem.onclick = () => __awaiter(this, void 0, void 0, function* () {
                        yield this.openDayNightModal(location);
                    });
                });
            }
            else {
                locationListContainer.createEl('p', { text: 'NO LOCATIONS AVAILABLE. CREATE ONE!' });
            }
        });
    }
    openDayNightModal(location) {
        return __awaiter(this, void 0, void 0, function* () {
            new DayNightModal(this.app, location, (dayNight) => {
                this.insertLocationText(location, dayNight);
            }).open();
        });
    }
    insertLocationText(location, dayNight) {
        return __awaiter(this, void 0, void 0, function* () {
            const [type, locationNameAndDay] = location.split('-');
            const [locationName] = locationNameAndDay.split('-');
            const fileName = `${type.toUpperCase()}-${locationName.toUpperCase()}-${path.basename(this.folderPath)}`;
            const formattedLocationText = `# ${type.toUpperCase()}. [[${fileName}|${locationName.toUpperCase()}]] - ${dayNight.toUpperCase()}`;
            const text = `${formattedLocationText}\n`;
            if (this.editor) {
                this.editor.replaceRange(text, this.editor.getCursor());
            }
            this.close();
        });
    }
    openNewLocationModal() {
        return __awaiter(this, void 0, void 0, function* () {
            new NewLocationModal(this.app, this.plugin, this.folderPath).open();
        });
    }
}
class DayNightModal extends Modal {
    constructor(app, location, callback) {
        super(app);
        this.location = location;
        this.callback = callback;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: `SELECT TIME FOR LOCATION: ${this.location}` });
        const dayButton = contentEl.createEl('button', { text: 'DAY' });
        dayButton.onclick = () => this.selectDayNight('DAY');
        const nightButton = contentEl.createEl('button', { text: 'NIGHT' });
        nightButton.onclick = () => this.selectDayNight('NIGHT');
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
    selectDayNight(dayNight) {
        this.callback(dayNight);
        this.close();
    }
}
class NewLocationModal extends Modal {
    constructor(app, plugin, folderPath) {
        super(app);
        this.plugin = plugin;
        this.folderPath = folderPath;
        this.typeSelect = null;
        this.locationNameInput = null;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: 'CREATE NEW LOCATION' });
        this.typeSelect = contentEl.createEl('select');
        this.typeSelect.createEl('option', { text: 'INT', value: 'INT' });
        this.typeSelect.createEl('option', { text: 'EXT', value: 'EXT' });
        this.locationNameInput = contentEl.createEl('input', { type: 'text', placeholder: 'Enter location name' });
        const createButton = contentEl.createEl('button', { text: 'CREATE' });
        createButton.onclick = () => __awaiter(this, void 0, void 0, function* () {
            if (this.typeSelect && this.locationNameInput) {
                const type = this.typeSelect.value;
                const locationName = this.locationNameInput.value.trim().toUpperCase();
                if (locationName) {
                    yield this.plugin.locationManager.createNewLocation(locationName, type, this.folderPath);
                    this.close();
                    new Notice(`Location ${type}-${locationName} created successfully!`);
                }
            }
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,